name: Examples

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

env:
  FLWR_TELEMETRY_ENABLED: 0

jobs:
  pytorch:
    runs-on: ubuntu-22.04
    steps:
      - uses: actions/checkout@v3
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: 3.7.15
      - name: Install
        run: |
          python -m pip install -U pip==22.3.1
          python -m pip install -U setuptools==65.6.3
          python -m pip install poetry==1.3.2
          poetry config virtualenvs.create false
      - name: Install dependencies
        run: |
          cd tests/pytorch
          python -m poetry install
      - name: Cache Datasets
        uses: actions/cache@v2
        with:
          path: "./tests/pytorch/data"
          key: pytorch-datasets
      - name: Download Datasets
        run: |
          cd tests/pytorch
          python -c "from torchvision.datasets import CIFAR10; CIFAR10('./data', download=True)"
      - name: Run FL
        run: |
          cd tests/pytorch

          # run the first command in background and save output to a temporary file:
          timeout 2m python server.py &
          sleep 3

          python client.py 1 > /dev/null 2>&1 &
          sleep 3

          if [[ $(ps aux | grep "[p]ython client.py 1" | awk '{ print $2 }') ]];
            then echo "Client process 1 started correctly";
            else echo "Client process 1 crashed" && exit 1;
          fi

          python client.py 2 > /dev/null 2>&1 &
          sleep 3

          if [[ $(ps aux | grep "[p]ython client.py 2" | awk '{ print $2 }') ]];
            then echo "Client process 2 started correctly";
            else echo "Client process 2 crashed" && exit 1;
          fi

          if [[ $(ps aux | grep "[p]ython server.py" | awk '{ print $2 }') ]];
            then echo "Server process started correctly";
            else echo "Server process crashed" && exit 1;
          fi

          wait

          if [[ "$(cat result)" = "SUCCESS" ]];
            then echo "Training worked correctly";
            else echo "Training had an issue" && exit 1;
          fi

  tensorflow:
    runs-on: ubuntu-22.04
    steps:
      - uses: actions/checkout@v3
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: 3.7.15
      - name: Install
        run: |
          python -m pip install -U pip==22.3.1
          python -m pip install -U setuptools==65.6.3
          python -m pip install poetry==1.3.2
          poetry config virtualenvs.create false
      - name: Install dependencies
        run: |
          cd tests/tensorflow
          python -m poetry install
      - name: Cache Datasets
        uses: actions/cache@v2
        with:
          path: "~/.keras"
          key: keras-datasets
      - name: Download Datasets
        run: |
          python -c "import tensorflow as tf; tf.keras.datasets.cifar10.load_data()"
      - name: Run FL
        run: |
          cd tests/tensorflow

          # run the first command in background and save output to a temporary file:
          timeout 2m python server.py &
          sleep 3

          python client.py 1 > /dev/null 2>&1 &
          sleep 3

          if [[ $(ps aux | grep "[p]ython client.py 1" | awk '{ print $2 }') ]];
            then echo "Client process 1 started correctly";
            else echo "Client process 1 crashed" && exit 1;
          fi

          python client.py 2 > /dev/null 2>&1 &
          sleep 3

          if [[ $(ps aux | grep "[p]ython client.py 2" | awk '{ print $2 }') ]];
            then echo "Client process 2 started correctly";
            else echo "Client process 2 crashed" && exit 1;
          fi

          if [[ $(ps aux | grep "[p]ython server.py" | awk '{ print $2 }') ]];
            then echo "Server process started correctly";
            else echo "Server process crashed" && exit 1;
          fi

          wait

          if [[ "$(cat result)" = "SUCCESS" ]];
            then echo "Training worked correctly";
            else echo "Training had an issue" && exit 1;
          fi

  bare:
    runs-on: ubuntu-22.04
    steps:
      - uses: actions/checkout@v3
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: 3.7.15
      - name: Install
        run: |
          python -m pip install -U pip==22.3.1
          python -m pip install -U setuptools==65.6.3
          python -m pip install poetry==1.3.2
          poetry config virtualenvs.create false
      - name: Install dependencies
        run: |
          cd tests/bare
          python -m poetry install
      - name: Run FL
        run: |
          cd tests/bare

          # run the first command in background and save output to a temporary file:
          timeout 20 python server.py &
          sleep 3

          python client.py 1 > /dev/null 2>&1 &

          python client.py 2 > /dev/null 2>&1 &

          wait

          if [[ "$(cat result)" = "SUCCESS" ]];
            then echo "Training worked correctly";
            else echo "Training had an issue" && exit 1;
          fi

