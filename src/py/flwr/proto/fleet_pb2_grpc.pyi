"""
@generated by mypy-protobuf.  Do not edit manually!
isort:skip_file
"""
import abc
import flwr.proto.fleet_pb2
import grpc

class FleetStub:
    def __init__(self, channel: grpc.Channel) -> None: ...
    NodeAvailable: grpc.UnaryUnaryMultiCallable[
        flwr.proto.fleet_pb2.NodeAvailableRequest,
        flwr.proto.fleet_pb2.NodeAvailableResponse]

    NodeUnavailable: grpc.UnaryUnaryMultiCallable[
        flwr.proto.fleet_pb2.NodeUnavailableRequest,
        flwr.proto.fleet_pb2.NodeUnavailableResponse]

    PullTaskIns: grpc.UnaryUnaryMultiCallable[
        flwr.proto.fleet_pb2.PullTaskInsRequest,
        flwr.proto.fleet_pb2.PullTaskInsResponse]
    """Retrieve one or more tasks, if possible

    HTTP API path: /api/v1/fleet/pull-task-ins
    """

    PushTaskRes: grpc.UnaryUnaryMultiCallable[
        flwr.proto.fleet_pb2.PushTaskResRequest,
        flwr.proto.fleet_pb2.PushTaskResResponse]
    """Complete one or more tasks, if possible

    HTTP API path: /api/v1/fleet/push-task-res
    """


class FleetServicer(metaclass=abc.ABCMeta):
    @abc.abstractmethod
    def NodeAvailable(self,
        request: flwr.proto.fleet_pb2.NodeAvailableRequest,
        context: grpc.ServicerContext,
    ) -> flwr.proto.fleet_pb2.NodeAvailableResponse: ...

    @abc.abstractmethod
    def NodeUnavailable(self,
        request: flwr.proto.fleet_pb2.NodeUnavailableRequest,
        context: grpc.ServicerContext,
    ) -> flwr.proto.fleet_pb2.NodeUnavailableResponse: ...

    @abc.abstractmethod
    def PullTaskIns(self,
        request: flwr.proto.fleet_pb2.PullTaskInsRequest,
        context: grpc.ServicerContext,
    ) -> flwr.proto.fleet_pb2.PullTaskInsResponse:
        """Retrieve one or more tasks, if possible

        HTTP API path: /api/v1/fleet/pull-task-ins
        """
        pass

    @abc.abstractmethod
    def PushTaskRes(self,
        request: flwr.proto.fleet_pb2.PushTaskResRequest,
        context: grpc.ServicerContext,
    ) -> flwr.proto.fleet_pb2.PushTaskResResponse:
        """Complete one or more tasks, if possible

        HTTP API path: /api/v1/fleet/push-task-res
        """
        pass


def add_FleetServicer_to_server(servicer: FleetServicer, server: grpc.Server) -> None: ...
